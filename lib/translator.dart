import 'dart:io';
import 'package:google_generative_ai/google_generative_ai.dart';

abstract class Translator {
  Future<String> translate(String text,
      {required Function onFirstModelError, bool useSecond = false});
}

class TranslatorImp implements Translator {
  final List<String> _models = [
    // 'gemini-2.0-flash-thinking-exp-1219',
    // 'gemini-1.5-flash',
    // 'gemini-exp-1206',
    'gemini-2.5-flash-lite-preview-06-17', // good for translate
    'gemini-2.5-pro',
    'gemini-2.5-flash',
    'gemma-3-27b-it',
    'gemini-2.0-flash',
  ];

  /// Fun√ß√£o de tradu√ß√£o que aceita texto e retorna o texto traduzido
  @override
  Future<String> translate(String text,
      {required Function onFirstModelError, bool useSecond = false}) async {
    ensureAPIKeyExists();

    try {
      return await getResponse(_models.first, text);
    } catch (e) {
      if (useSecond) rethrow;
      print('üçÄ Erro com ${_models.first}, tentando novamente em 40süö´');
      print('üö´üö´ $e üö´üö´');
      onFirstModelError();
      await Future.delayed(const Duration(seconds: 40));
      return await getResponse(_models.first, text);
    }
  }

  Future<String> getResponse(String modelType, String text) async {
    final model = getModel(modelType);

    final chat = model.startChat(history: [
      Content('user', [
        TextPart(
            '[`AboutDialog`]: {{site.api}}/flutter/material/AboutDialog-class.html\n[Adding Assets and Images in Flutter]: /ui/assets/assets-and-images\n[`AlertDialog`]: {{site.api}}/flutter/material/AlertDialog-class.html'),
      ]),
      Content('model', [
        TextPart(
            '[`AboutDialog`]: {{site.api}}/flutter/material/AboutDialog-class.html\n[Adicionando Assets e Imagens no Flutter]: /ui/assets/assets-and-images\n[`AlertDialog`]: {{site.api}}/flutter/material/AlertDialog-class.html'),
      ]),
      Content('user', [
        TextPart('dont translate thoses links\n'),
      ]),
      Content('model', [
        TextPart(
            '[`AboutDialog`]: {{site.api}}/flutter/material/AboutDialog-class.html\n[Adding Assets and Images in Flutter]: /ui/assets/assets-and-images\n[`AlertDialog`]: {{site.api}}/flutter/material/AlertDialog-class.html'),
      ]),
      Content('user', [
        TextPart(
            'em arquivo grandes viram assim, evite.\n\noutput from large contet:\n[25648](https://github.com/flutter/engine/pull/25548) [macos] Libera o buffer de pixel copiado ap√≥s a cria√ß√£o da textura (cla: sim, aguardando tree verde, platform-macos, embedder, cp: 2.2)\n\n[25649](https://github.### aguardando a √°rvore ficar verde - 1309 pull requests'),
      ]),
      Content('model', [
        TextPart(
            'evite assim:\n(https://github.com/flutter/engine/pull/25548) [macos] Libera o buffer de pixel copiado ap√≥s a cria√ß√£o da textura (cla: sim, aguardando tree verde, platform-macos, embedder, cp: 2.2)\n\n(https://github.com/flutter/engine/pull/25548) [macos] Libera o buffer de pixel copiado ap√≥s a cria√ß√£o da textura (cla: sim, aguardando tree verde, platform-macos, embedder, cp: 2.2)'),
      ]),
      Content('user', [
        TextPart(
            'Algumas vezes voc√™s est√° esquecendo de devolver header com ### traduzido, ele simplemente n√£o est√° na resposta.\n'),
      ]),
      Content('model', [
        TextPart(
            'Entendido. Vou me atentar para garantir que os cabe√ßalhos marcados com `###` sejam traduzidos e inclu√≠dos corretamente nas respostas futuras, mantendo a formata√ß√£o original.'),
      ]),
    ]);

    final content = Content.text(text);

    final response = await chat.sendMessage(content);

    // Retorna o texto traduzido
    return response.text ?? '';
  }

  GenerativeModel getModel(String model) {
    final apiKey = Platform.environment['GEMINI_API_KEY']!;
    return GenerativeModel(
      model: model,
      apiKey: apiKey,
      generationConfig: GenerationConfig(
        temperature: 1,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 8192,
        responseMimeType: 'text/plain',
      ),
      systemInstruction: Content.system(
          '''Traduza o seguinte texto t√©cnico sobre desenvolvimento de aplicativos Flutter do ingl√™s para o portugu√™s brasileiro, mantendo a formata√ß√£o, as quebras de linha originais e os recuos do documento. Identifique-os e trate cada tipo de formata√ß√£o como cada um exige (HTML, YAML, Markdown, etc). Preserve a terminologia t√©cnica no idioma original sempre que necess√°rio para garantir clareza e precis√£o, especialmente termos como 'widget', 'bundle', 'asset', 'design patterns', 'SUT', 'flag' e outros termos t√©cnicos espec√≠ficos. N√£o traduza esses termos para o ingl√™s. Certifique-se de que o texto traduzido seja fluido, claro e adequado para desenvolvedores brasileiros. Caso o texto contenha links ou refer√™ncias ancoradas, traduza os textos de exibi√ß√£o (anchors) para o portugu√™s somente quando necess√°rio para manter a coer√™ncia do conte√∫do, mas mantenha as URLs intactas no formato original. N√£o altere a estrutura ou os elementos espec√≠ficos do documento, como cabe√ßalhos, listas e imagens.

O importante √© manter o n√∫mero de linhas equivalentes ao original, preservando a formata√ß√£o do texto e os recuos.  O limite de largura dos blocos de texto deve ser ajustado para que a sa√≠da tenha a mesma quantidade de linhas do bloco de texto original.  Blocos de texto geralmente est√£o separados por quebras de linha vazias; mantenha essas linhas vazias.

Observe a quatidade de quebras de linhas para manter igual o original. Isso implica em deixar linhas curtas muitas vezse entre 50 e 120 chars, por√©m se atente soment ao n√∫mero de linhas do bloco em tradu√ß√£o

Mantenha o contexto t√©cnico preciso e a formata√ß√£o original, evitando tradu√ß√µes literais que soem estranhas ou pouco naturais no portugu√™s brasileiro, priorizando a fluidez e clareza.  Traduza termos t√©cnicos apenas se houver equivalentes amplamente reconhecidos no Brasil, e forne√ßa a primeira tradu√ß√£o entre par√™nteses para guiar o leitor. Omita termos como 'underlying' e semelhantes que s√£o espec√≠ficos do ingl√™s e que podem ser omitidos em portugu√™s sem alterar o sentido original.

Links devem ser mantidos funcionais e ancorados corretamente. N√£o traduza as refer√™ncias dos links que ficam no rodap√© ou logo ap√≥s a se√ß√£o adjacente.

Traduza os cabe√ßalhos e t√≠tulos para o portugu√™s, mantendo a estrutura original do documento. Certifique-se de que os t√≠tulos sejam claros e representem adequadamente o conte√∫do subsequente.

Preste aten√ß√£o a express√µes idiom√°ticas que n√£o possuem tradu√ß√£o direta; adapte o significado para se alinhar ao contexto brasileiro. Exemplos, como trechos de c√≥digo e formata√ß√µes de console, devem permanecer id√™nticos para evitar confus√µes no uso t√©cnico. No caso de instru√ß√µes, como comandos no terminal, mantenha o texto em ingl√™s para n√£o interferir no funcionamento, mas explique em portugu√™s quando necess√°rio.
'''),
    );
  }

  void ensureAPIKeyExists() {
    final apiKey = Platform.environment['GEMINI_API_KEY'];
    if (apiKey == null) {
      stderr.writeln(r'No $GEMINI_API_KEY environment variable');
      exit(1);
    }
  }
}
